loadData <- function(end.yyyymm = 201600) {
    ## yields
    df <- read.csv("data/yields_gsw_monthly.csv")
    yield.cols <- names(df)[-1]
    df$f510 <- 2*df$y10 - df$y5
    df$ybar <- rowMeans(df[yield.cols[-(1:3)]])
    df$yyyymm <- floor(df$Date/100)
    df$year <- floor(df$yyyymm/100)
    df$month <- df$yyyymm-df$year*100
    df$date <- as.Date(as.character(df$Date), format="%Y%m%d")
    df$Date <- NULL

    ## PTR
    ## source: https://www.federalreserve.gov/econres/us-models-package.htm
    ptr <- read.csv("data/pistar_PTR.csv")
    ptr$yyyymm <- ptr$Year*100+(ptr$Quarter)*3
    ptr <- ptr[c("yyyymm", "pistar_PTR")]
    names(ptr)[2] <- "pistar.ptr"
    df <- merge(df, ptr, all.x = TRUE)

    ## Core CPI and CPo's EWMA
    cpi <- read.csv("data/CPIcore.csv")
    names(cpi) <- c("Date", "corecpi")
    cpi$date <- as.Date(cpi$Date, format="%m/%d/%Y")
    cpi$yyyymm <- as.numeric(format(cpi$date, "%Y%m"))
    cpi$pi <- 100*c(rep(NA, 12), diff(log(cpi$corecpi), 12)) # y-o-y core CPI inflation
    cpi <- subset(cpi, yyyymm >= 196111)
    cpi$pistar.ewma <- getEWMA(cpi$pi)
    cpi <- cpi[c("yyyymm", "pistar.ewma", "pi")]
    df <- merge(df, cpi, all.x = TRUE)

    ## ## ex post real rate
    ## df$eprr <- df$y1 - df$pi

    ## ## ex ante real rate using SPF
    ## spf <- read.csv("data/spf_inflation.csv", na.string="#N/A")
    ## spf$yyyymm <- spf$YEAR*100 + spf$QUARTER*3
    ## spf$pi.spf <- spf$INFPGDP1YR
    ## ind <- which(spf$yyyymm == 197409)
    ## spf$pi.spf[ind] <- spf$pi.spf[ind-1]
    ## spf <- spf[c("yyyymm", "pi.spf")]
    ## df <- merge(df, spf, all.x = TRUE)
    ## df$earr <- df$y1 - df$pi.spf

    ## Laubach-Williams
    lw <- read.csv("data/rstar_LW.csv" , na.strings = "#N/A")
    lw$yyyymm <- lw$Year*100+lw$Quarter*3
    lw <- lw[c("yyyymm", "Rstar_LW_filtered")]
    names(lw)[2] <- "rstar.lw"
    df <- merge(df, lw, all.x = TRUE)

    ## Lubik-Mathes
    lm <- read.csv("data/LM_real_rate110716.csv")
    lm$year <- floor(lm$date)
    lm$quarter <- (lm$date - lm$year)*4 + 1
    lm$yyyymm <- lm$year*100 + lm$quarter*3
    lm <- lm[c("yyyymm", "median")]
    names(lm)[2] <- "rstar.lm"
    df <- merge(df, lm, all.x = TRUE)

    ## ## Johannsen-Mertens
    ## jm <- read.csv("data/Rstar/RStar_JohannsenMertensFilteredValue.csv", stringsAsFactors = FALSE)
    ## colnames(jm) <- c('date', 'rstar.jm')
    ## jm$year <- floor(jm$date/100)
    ## jm$quarter <- jm$date-jm$year*100
    ## jm$yyyymm <- jm$year*100 + jm$quarter*3
    ## jm <- jm[c("yyyymm", "rstar.jm")]
    ## df <- merge(df, jm, all.x = TRUE)

    ## Kiley
    kiley <- read.table("data/rstar_kiley_new.csv", header=TRUE)
    names(kiley) <- c("date", "X", "rstar.kiley")
    kiley$year <- floor(kiley$date)
    kiley$quarter <- (kiley$date - kiley$year)*4 + 1
    kiley$yyyymm <- kiley$year*100 + kiley$quarter*3
    kiley <- kiley[c("yyyymm", "rstar.kiley")]
    df <- merge(df, kiley, all.x = TRUE)

    ## average r-star
    ## X <- data.matrix(df[c("rstar.lw", "rstar.lm", "rstar.jm")])
    ## X <- data.matrix(df[c("rstar.lw", "rstar.lm", "rstar.jm", "rstar.kiley")])
    X <- data.matrix(df[c("rstar.lw", "rstar.lm", "rstar.kiley")])
    df$rstar.mean <- rowMeans(X, na.rm=TRUE)

    df <- subset(df, yyyymm <= end.yyyymm & yyyymm >= 197112)
    attr(df, "yield.cols") <- yield.cols
    df <- df[df$month %% 3 == 0, ] # make quarterly
    rownames(df) <- NULL
    df
}

formatTbl <- function(tbl, se.rows=NULL, fmt="%4.2f") {
    ## format table: two digits, NAs become empty strings, parentheses for SEs
    est.rows <- setdiff(1:nrow(tbl), se.rows)
    lapply(tbl, function(col) {
               na.rows <- which(is.na(col))
               colchar <- character(length(col))
               ind1 <- setdiff(est.rows, na.rows)
               colchar[ind1] <- sprintf(fmt, col[ind1])
               ind2 <- setdiff(se.rows, na.rows)
               colchar[ind2] <- sprintf(paste0("(", fmt, ")"), col[ind2])
               colchar })
}

getEWMA <- function(x, v = 0.987, y0) {
    ## calculate exponentially-weighted moving average as in Cieslak-Povala
    tau <- numeric(length(x))
    if (missing(y0)) {
        tau[1] <- x[1]
    } else {
        tau[1] <- y0
    }
    for (t in 2:length(x))
	tau[t] <- tau[t-1] + (1-v)*(x[t] - tau[t-1])
    tau
}
