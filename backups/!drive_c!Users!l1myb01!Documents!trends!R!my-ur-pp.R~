##
## Phillips-Perron Z_alpha Test
## based on urca::ur.pp
## changes:
## - only Z-alpha
## - no trend
## - allow for "none" -- AR(1) without intercept
my.ur.pp <- function(x, type=c("Z-alpha"), model=c("none", "constant"), lags=c("short", "long"), use.lag=NULL){
    x <- na.omit(as.vector(x))
    n <- length(x)
    y <- x[-1]
    y.l1 <- x[-n]
    n <- n-1
    lags <- match.arg(lags)
    model <- match.arg(model)
    type <- match.arg(type)
    if(!(is.null(use.lag))){
        lmax <- as.integer(use.lag)
        if(lmax < 0){
            warning("\nuse.lag has to be positive and integer; lags='short' used.")
            lmax <- trunc(4*(n/100)^0.25)}
    }else if(lags == "short"){
        lmax <- trunc(4*(n/100)^0.25)
    }else if(lags == "long"){
        lmax <- trunc(12*(n/100)^0.25)}
    if (model=="none") {
        test.reg <- summary(lm(y ~ y.l1 - 1))
        res <- residuals(test.reg)
        s <- 1/n*(sum(res^2))
        myy <- (1/n^2)*sum(y^2)
        idx <- 1:lmax
        coprods <- sapply(idx, function(l) t(res[-c(1:l)])%*%(res[-c((n-l+1):n)]))
        weights <- 1 - idx/(lmax+1)
        sig <- s + (2/n)*(t(weights)%*%coprods)
        alpha <- coef(test.reg)[1]
        teststat <- n*(alpha-1)-0.5*(sig-s)/myy
    } else if(model=="constant"){
        test.reg <- summary(lm(y ~ y.l1))
        res <- residuals(test.reg)
        s <- 1/n*(sum(res^2))
        myybar <- (1/n^2)*sum((y-mean(y))^2)
        idx <- 1:lmax
        coprods <- sapply(idx, function(l) t(res[-c(1:l)])%*%(res[-c((n-l+1):n)]))
        weights <- 1 - idx/(lmax+1)
        sig <- s + (2/n)*(t(weights)%*%coprods)
        alpha <- coef(test.reg)[2, 1]
        teststat <- n*(alpha-1)-0.5*(sig-s)/myybar
    }
    return(as.numeric(teststat))
}
