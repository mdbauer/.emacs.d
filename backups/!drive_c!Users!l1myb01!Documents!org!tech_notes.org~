* Programming principles
modularize -- put everything in functions!
testing
 -> turn bugs into test cases
add assertions to check program's operation
documentation -- interfaces and reasons
 -> clear description at the beginning of the function of purpose, inputs, outputs
possibly profiling

* LaTeX
[[file:~/Documents/Papers/D/Downes%20(2002)%20Short%20Math%20Guide%20for%20LaTeX.pdf][Short Math Guide for LaTex]]
[[http://texdoc.net/texmf-dist/doc/latex/latex2e-help-texinfo/latex2e.pdf][An unofficial reference manual]] HTML version
[[https://tobi.oetiker.ch/lshort/lshort.pdf][The Not So Short Introduction to Latex]]
** Beamer
[[http://tug.ctan.org/tex-archive/macros/latex/contrib/beamer/doc/beameruserguide.pdf][Beamer user guide]]

* Miktex
** How to add BST files
- add to local texmf tree
  - C:\Users\l1myb01\AppData\Local\MiKTeX\2.9\bibtex\bst
  - needs to be in bibtex\bst folder!
- then open Miktex options - "Settings" - mo.exe
  - refresh FNDB
http://docs.miktex.org/manual/localadditions.html

* AUCTEX
http://tex.stackexchange.com/questions/20843/useful-shortcuts-or-key-bindings-or-predefined-commands-for-emacsauctex

C-c RET         new macro
C-c C-e		new environment
C-c C-j/M-RET	insert new item
C-c C-q C-r/M-g	LaTeX-fill-region will format or `fill' the current region.
C-c C-v  run viewer
C-c `	show errors

C-c .   mark environment

automatic formatting of a section: C-c C-q C-s

http://zkwarl.blogspot.com/2006/08/latex-tip-emacs-auctex-and-preview-tex.html
Beamer tricks: http://osdir.com/ml/tex.latex.beamer.general/2006-01/msg00013.html

latex-math-mode:
https://www.gnu.org/software/auctex/manual/auctex/Mathematics.html

* RefTEX
C-c =  reftex-toc
C-c (  reftex-label  Insert label at point
C-c )  reftex-reference   Show list of labels and insert reference
C-c [  reftex-citation    Select reference and insert citation.
C-c &  reftex-view-crossref    Jump to label
g - update buffer (*toc* or *Reftex Select*)
r - reparse LaTeX document and rebuild buffer
* Emacs

http://www.masteringemacs.org/
http://www.emacswiki.org/emacs/EmacsNiftyTricks
https://sites.google.com/site/steveyegge2/effective-emacs
- note list at the bottom with pointers to additional useful features

http://vgoulet.act.ulaval.ca/en/emacs/
all-in-one Emacs binary by Vincent Goulet.

** key bindings
https://www.masteringemacs.org/article/mastering-key-bindings-emacs

C-x ESC ESC   shows what last command did

** rectangles
http://www.gnu.org/software/emacs/manual/html_node/emacs/Rectangles.html
C-x r k     kill rectangle
C-x r M-w   copy rectangle
C-x r y     yank rectangle

** TAGS
M-.  find tag ?
M-*  Pop back to where you previously invoked M-. and friends.
C-u - M-.
    Go back to previous tag found.
** General
move around using the mark ring
C-SPC C-SPC set mark without activating it
C-u C-SPC move point to mark

C-/ undo changes (undo changes in region: C-u C-/)

M-% replace text within region

M-=  count-words-region (with C-u, count in whole buffer)

C-x C-c   exit Emacs
M-g M-g / M-x goto-line          - Go to a specific line
M-x column-number-mode - Show the current column number in text bar

C-u [number] command/key -- repeat command or key
  e.g. C-u 78 # -- create a separating line of # in R script
  defaults to 4

C-x # -- server-edit -- When you finish editing file in the Emacs server, type C-x # (server-edit) in its buffer. This saves the file and sends a message back to the emacsclient program, telling it to exit. Programs that use EDITOR usually wait for the ``editor''Å\in this case emacsclientÅ\to exit before doing something else.
 Note: If I just kill the buffer with C-x k, maybe the client will keep running.

C-j  new line and indent

C-o  insert new line, stay at current position

C-M-\  indent-region

M-!    run shell command

M-x grep  search in multiple files

M-x rgrep -- recursive search -- excludes .svn and ~r

C-x C-r (custom) list recent files

C-x s		save some buffers (asks about each modified buffer)

C-q C-i		insert horizontal tab

** commenting
M-x comment-region   add  comment delimiters
M-x uncomment-region   remove  comment delimiters
C-c '  comment/uncomment paragraph
M-;    comment region
** movements
C-b, C-f, C-p, C-n -- left, right, up, down
M-b, M-f -- move backward/forward by one word
M-a, M-e -- move backward/forward by one sentence

C-up/down -- move backward/forward one paragraph
  also M-{ and M-}

C-v -- scroll up, i.e., page down (can choose number of lines)
 e.g. C-u 1 C-v -- scroll up one line
M-v -- scroll down, i.e., page up
C-l -- move current line to window center
C-M-v -- scroll other window

C-u C-SPC -- return to previous position

M-m -- back to indentation

** inserting/deleting
C-d  like Delete
M-d  delete next word
yanking:
M-y brings back earlier kills (works only after C-y)
C-S-Backspace  kill whole line
C-/  undo

M-SPC  just-one-space -- delete all but one space
** marking
C-SPC set mark
C-x C-x  exchange point and mark -- go back to mark
C-u C-SPC   jump to mark -- cycle through local mark ring

C-x SPC  pop-global-mark -- pop off global mark ring and jump to top location

C-x h    mark whole buffer
M-@ mark-word
C-M-@ set mark after end of balanced expression

M-h mark-paragraph: move point to beginning set mark at the end of paragraph
C-M-h mark-defun: set mark and point around major top-level definitions
C-x h mark-whole-buffer

** Calculator
C-x * c  start calculator
** important help commands
C-h C-h -- help about help
C-h c -- describe-key-briefly    MOST BASIC
C-h k -- describe-key          VERY USEFUL
C-h f -- describe-function
C-h v -- describe-variable
C-h r -- read Emacs manual
C-h a -- apropos
C-h b -- describe-binding -- brings up list with all bindings (key-binding <-> elisp function)
  - click the name of an elisp function to open help
  - or use C-h f elsip-fn-name
C-h t -- open tutorial
C-h m -- describe the current major mode and its key-bindings
** windows
C-x + -- balance windows
C-x 0 -- kill this window
C-x 4 b -- switch to buffer in other window
C-x 4 f -- find file in other window
** miscellaneous useful commands
M-/ : autocomplete word (based on previous words in the file)
M-x : align-regexp
M-( : start keyboard macro
M-) : end keyboard macro
C-x e: execute keyboard macro.
** Search / Regular expressions
isearch:
C-s    isearch forward
C-r    isearch backward
C-w    adds word following point to search buffer
C-h m  (during a search) has good tips
M-e    edit search string in minibuffer

regexp searcH:
M-C-s  search forward for regular expressen
M-C-r  search backward for regular expressen
replace-regexp
query-replace-regexp.
** keyboard macros
C-x (  - begin recording macro
C-x )  - stop recording macro
C-x e  call-last-kbd-macro

rebind macro evaluation:
(global-set-key [f5] 'call-last-kbd-macro)
** Registers
http://emacs-fu.blogspot.com/2009/01/using-registers.html
http://www.emacswiki.org/emacs/Registers
C-x r SPC R - save position to register R
C-x r j R - jump to position saved in register R
C-x r s R - save selected text to register
C-x r i R - instert text from register R
C-x r f R - store current frame configuration
C-x r w R - store current window configuration
  -> window and frame configurations are retrieved with C-x r j R

M-x view-register
M-x list-registers

tips:
- define file in .emacs to easily jump to them
  (set-register ?e '(file . "~/.emacs"))

** transposing
*M-t  transpose-words*
C-t  transpose-chars
C-x C-t  transpose-lines
C-M-t   org-transpose-element

Dir wie geht hallo es?

** filling
M-q  -- fill-paragraph
intelligently line-wraps your text for you:
an absolute must, and it works inside source-code comments.  Wir
wollen doch mal sehen Wir wollen doch mal sehen Wir wollen doch mal
sehen Wir wollen doch mal sehen Wir wollen doch mal sehen Wir wollen
doch mal sehen Wir wollen doch mal sehen Wir wollen doch mal
sehenas;dofihas;df oiaj; odfiawef;o ijqwje;fo iawje f;oij
** spelling
M-$ ispell-word  Check and correct spelling of the active region or the word at
     point.
M-x ispell   Check whole region/buffer.

** IDO
C-s / C-r -- next match / previous match
C-j -- select file/directory that I typed in, RET would open first matching entry
** ChangeLog
C-x 4 a -- visit ChangeLog file and create new entry
** grep
https://www.gnu.org/software/emacs/manual/html_node/emacs/Grep-Searching.html#Grep-Searching

** Emacs older notes
*** navigation
C-u (number) + command	repeat command several times
C-l 	        clear window, cursor in the middle, redisplay text
M-g g   	go to line
M-< / M->	go to beginning/end of file
C-BKSP		delete previous word

*** editing
C-o       insert blank line
BKSP/C-d  delete previous/following character
M-BKSP/M-d kill previous/following WORD
C-x u 	  undo
C-SPC     set mark here
M-w  	  copy
C-w  	  cut (kill)

C-s / C-r incremental search forward backward
M-%   queried search and replace.   SPC fo replace, Del to leave as is
M-x replace-string   unconditional search and replace

*** SHELL
M-! CMD		execute shell command
M-x shell	run shell in buffer
M-x term	run shell in buffer, full terminal emulation
M-x eshell	run Emacs shell

*** HELP
C-h m	help on current major mode
C-h c command	show brief description of command
C-h k key/command	show documentation of command
C-h c describe key/command briefly
C-h f function	describe function
C-h a text	apropos - list all commands that contain text
C-h i   read manuals (Info)
C-h r   read emacs manual
*** minibuffer:
<Tab>  complete command mini buffer

*** INFO
C-h i 		open info (documentation)
q   		quit documentation
? 		show list of commands
note: type <SPC> after to go back to where I was
h		info tutorial
n / p		next/previous node _on the same level_
<SPC>		page down, then next node
<DEL> or <BKSP> page up
note: page up and page down keys do the same, but don't change nodes
[ / ] 	      	backward / forward one node _regardless of the level_
b   		beginning of node
l		move back in history
m ... 		go to menu item.
<TAB>/Shift-<TAB>	cycle through menu items
u		go up one level
f ...		follow cross reference
f ?		show all cross references
d 		go to Info directory node
t		go to top node

* Emacs LISP
M-:
Read a single Emacs Lisp expression in the minibuffer, evaluate it, and print the value in the echo area (eval-expression).
C-x C-e
Evaluate the Emacs Lisp expression before point, and print the value in the echo area (eval-last-sexp).
*** basics
in scratch buffer press C-x C-e (evaluate) to evaluate lisp code
or go to minibuffer using M-: and enter lisp expression there

(+ 1 2 3 4)

C-x C-e		evaluate list using LISP interpreter

(+ 2 2)
'(this is a quoted list)
'(+ 2 2)

generates error message:
(penis this is an unquoted list)

in the debugger window:
q  to exit

(message "hallo welt")

(message "This is a pretty sweet day with %d hours." (* 6 4))

*** variables
(setq x 4)
x
'x

(setq y (+ a 2))
y
(message "%d" y)
(message (number-to-string y))

(set 'z 10)
(setq z 10)

(setq numlist '(1 2 3 4 5 6))
? How could I use a function to add up all the numbers in this list?

(setq a1 1 a2 2 a3 3)  ; setq can assign multiple variables at once
a2

*** using functions
(y) ;; y has not function defition (yet)
(concat "abc" "def" "4")
(+ x 10)
(+ x 'hello)
(number-or-marker-p 'hallo)

(setq mystring (message "Na Du Kleiner!"))
mystring

(message "The name of this buffer is: %s." (buffer-name))

(set 'flowers '(rose violet daisy buttercup))
(add-to-list 'flowers 'tulip)

*** practicing evaluations
M-:  evaluate from minibuffer

(buffer-name)
(buffer-file-name)
(current-buffer)
(other-buffer)
(switch-to-buffer (other-buffer))
(buffer-size)
(point)
(point-min)
(point-max)
*** function definitions
**** General
(defun multiply-by-seven (number)
  "Multiply NUMBER by seven."
  (interactive "p")
  (message "The result of %d times %d is %d" 7 number (* 7 number)))

(defun test-function (arg char)
  "DOCUMENTATION..."
  (interactive "p\ncWhich character? ")
  (message "The number was %d and the character was %c" arg char))

(multiply-by-seven 4)
or
C-u 4 M-x multiply-by-seven
or
M-4 M-x multiply-by-seven

C-h f		-- describe function

(load "~/emacs/lisp/wc")
**** let
(setq zebra 'zebra-streifen)
(setq tiger "zahm")
(let ((zebra 'stripes)
      (tiger 'fierce))
  (message "One kind of animal has %s and another is %s."
	   zebra tiger))
(message "One kind of animal has %s and another is %s."
	 zebra tiger)
**** if
(setq myvar 'hallo)
(setq myvar)
(defun check-print-var (thevar)
  "Diese Funktion checkt was in der Variable THEVAR ist und gibt den Wert aus."
  (interactive "sGib was ein!")
  (if (equal thevar nil)
      (message "Hier ist nix in der Variable!")
    (message "Die Variable hat den Wert %s." thevar)))
(check-print-var 'huhu)
(check-print-var myvar)
(check-print-var 20)

* ORG Mode
FAQ -- in particular version/update
http://orgmode.org/worg/org-faq.html
http://orgmode.org/worg/index.html

Use cases:
- organize your life in plain text
  http://doc.norang.ca/org-mode.html
- dayplanner
  http://newartisans.com/2007/08/using-org-mode-as-a-day-planner/

** General
  <TAB> 	subtree cycling
  S-<TAB>	... for whole documents

  M-left/right	promote/demote current heading
  M-S-left/right promote/demote current subtree

  M-Ret		new heading/list item
  C-Ret		new heading after subtree

  C-c C-a 	show all
  C-c C-n/p	next/previous heading
  C-c C-f/b/u	forward/backward (same level), up one level
  M-S-<RET>	new TODO item
  M-S-up/down	move subtree
  C-c *		turn normal line into headline
** Clocking
S-M arrows -- increase/decrease starting time and adjust ending time of previous task
C-c a a -- open weekly agenda
C-u 1 C-c a a -- open daily agenda
*** in Agenda
b/f -- move backward/forward
R -- show clocked work time
l -- show log of clocked times
** lists
  - or + starts a list
  - [ ]  list item with check box
** hyperlinks
http://www.reuters.com
file:priorities.org
file:conferences/conferences.xlsx
** tags
   C-c C-c      add tag (when at headline)
   e.g. use to mark activity type -- :WRITE: :CODE: :MATH:
   C-c \	search tags
** todo items
  C-c C-t	rotate TODO state/add TODO label to headline
  -> can customize workflow states! e.g. TODO -> REVISE -> DONE
  C-c ,       	set priority
  S-up,S-down	shift priority up or down
  C-c / t       sparse tree with ToDo items

*** TODO [#A] high priority
*** TODO [#B] medium priority
*** TODO [#C] low priority

** export
C-x C-e   export dispatcher
** Agenda*** commands in Agenda view
http://orgmode.org/manual/Agenda-commands.html#Agenda-commands
L       show node and recenter window
F       toggle follow mode
C-c C-o follow link in text of Org-node
o  delete other window
d  day view
w  week view
v t
I  clock in
O  clock out

** cool new tricks from Harry Schwartz video
https://www.youtube.com/watch?v%3DSzA2YODtgK4

- links to locations in other files
- tables
  - start table with | | | return "|-" TAB
  - M-arrows to reorder rows and column
  - very powerful: can put elisp/formatting
| my | table   |
|----+---------|
| 12 | buckle  |
| 34 | my shoe |
|    |         |
- source code
  - <s TAB is short cut for source block
  - C-c ' to go to source-code editor
  - C-c C-c evaluate source code
- powerful latex integration!
- in init.el just load configuration.org with babel
  - this is literate programming
  - check out Harry Schwartz's configuration.org on github ("hrs" or "rms"?)
  - other good uses of literate programming:
    papers/reports/reproducible research; documentation/teaching;
    generally stuff that doesn't change very much
- TODO management
  - Shift-M-return, when you're in a TODO item, to create another TODO
  - may be useful to add another state "WAITING"
  - may be useful to add "CLOSED" stamp when status changes to DONE
  - C-c C-x C-e -- archive (he may have that set up individually)
- talk about org-capture at emacs NYC
- GTD: for every project have a "next action"
- website:
  - =org2blog=  - wordpress site
  - =org-publish=  - less overhead
  - =ox-twbs=
  - =orgzly=
  - export to twitter bootstrap
  - jekyll
  - github pages

** capture
https://www.youtube.com/watch?v=KdcXu_RdKI0
* ESS

** ESS process buffer (iESS mode)
C-c C-x -- execute "objects()"
C-c C-s -- execute "search()"
C-c C-e -- evaluate expression

Transcript
M-n / M-p - next/previous command in history
C-c C-p/n - move to previous/next prompt
C-c RET   - copy code to current command prompt (and move there)

M-r       - previous matching command (enter search term)
C-c C-a	  - beginning of command line, forward to last prompt
C-c C-o   - flush output since last input (available in all shell modes)

C-c `     - show traceback - press enter to go to offending line

C-x `     - navigate to error (general emacs functionality)
M-g n and M-g p   - next previous error (ditto)

C-c C-k     request ESS process
  - in other buffers, use command ess-request-a-process
  - may want to bind to global key

** ESS[S] mode
C-c C-l load file (evaluates entire file in buffer) -- source()

evaluating code
 - any of these with prefix C-u to not display commands, only output
C-Return   send region or line and step to next line
C-M-x      send region or function or paragraph
C-c C-c    same but step to next line of code

these are less often used
C-c C-f  eval function
C-c M-f  eval function and go

C-c C-s  switch to a new underlying process
C-c C-o  document functions using Roxygen

movement
C-M-a/e  move to beginning or end of function

marking
C-M-h    mark function

** ESS help
C-c C-v  get help on R function -- works both in iESS and ESS mode


*** within ESS-help
n/p  move to next/previous section
l    evaluate line of example code
x -- kill buffer and go
k -- kill buffer

** ESS tracebug - interactive/visual debugging
See 10.1 ESS tracebug in ESS documentation

   A more detailed ess-tracebug documentation with screenshots is
available at <http://code.google.com/p/ess-tracebug/>.

   A short tutorial is at
<http://code.google.com/p/ess-tracebug/wiki/GettingStarted>.

* Dired
C-x d  dired
q      quit dired (kills buffer)
<SPC> and n in Dired are equivalent to C-n. p is equivalent to C-p. (Moving by lines is so common in Dired that it deserves to be easy to type.)
<DEL> (move up and unflag) is also often useful simply for moving up
j (dired-goto-file) prompts for a file name using the minibuffer, and moves point to the line in the Dired buffer describing that file.
+ create directory
C copy file
R rename/move file
d mark for deletion
D delete
g refresh dir listing
^ go to parent directory
** rename open filde and buffer using dired
    C-x C-j (dired-jump to current file)
    R to rename the file (or dired-do-rename).
    C-x k RET to go back to the (renamed) buffer

* SVN
Path: svn+ssh://l1myb01@re-subversion.sf.frb.org/var/svn/financial-area/zlb/
 or   svn+ssh://l1myb01@172.27.94.51/var/svn/financial-area/zlb/
Subversion cheat sheet http://www.abbeyworkshop.com/howto/misc/svn01/
set SVN_SSH=C:\Program Files\PuTTY\plink.exe

svn info -- show information about current working copy

** add new project to SVN
1. import:
svn import inflation-news svn+ssh://l1myb01@172.27.94.51/var/svn/financial-area/zlb/inflation-news -m "Initial import"
2. delete imported directory
3. checkout project from repository
svn checkout svn+ssh://l1myb01@172.27.94.51/var/svn/financial-area/zlb/inflation-news

http://stackoverflow.com/questions/22578300/why-doesnt-svn-import-put-the-imported-folder-under-version-control


** checking out project in UNIX
svn checkout svn+ssh://l1myb01@172.27.94.51/var/svn/financial-area/zlb/rrp/trunk rrp

** rename file
svn mv SRC DST
** show list of all unversioned files in directory
svn status  => shows status of all files
svn status | grep ^?   => only shows unversioned files
** delete all files from repository that were deleted locally
svn status | grep '^\!' | sed 's/! *//' | xargs -I% svn rm %

** add all files to repository that are not under version control
svn add . --force
or
svn status |grep '\?' |awk '{print $2}'| xargs svn add

** add global-ignores
add extensions to Subversion config file in C:\Users\l1myb01\AppData\Roaming\Subversion
** properties
svn proplist * -- show properties for all files and folders
svn propdel svn:ignore results -- remove svn:property from file results
svn propget svn:ignore -R . -- which files recursively, have svn:ignore properties?
svn propset svn:ignore myfile.r -- add ignore property to file
** get windows command-line svn client up and running
- download from Sliksvn
- configure to use SSH http://agateau.com/2007/07/03/windows-svnssh-and-the-subversion-command-line-client/

* R
** Metaprogramming
see http://adv-r.had.co.nz/Computing-on-the-language.html

substitute
eval
quote

** .Rprofile
see help page Startup
home directory: display using 'Sys.getenv("R_USER")'
for me that is "C:\\Users\\l1myb01\\AppData\\Roaming"
edit: ~\.Rprofile

** command line
https://swcarpentry.github.io/r-novice-inflammation/05-cmdline/
- run with "Rscript myscript.R arg1 arg2"
- access args with commandArgs(trailingOnly = TRUE)

- to be able to run "./myscript.R arg1 arg2"
  - add shebang "#!/usr/bin/env Rscript
  - chmod +x myscript.R

* Linux/Unix computing
** introduction
source: http://swcarpentry.github.io/shell-novice/
my examples in unix-learning on the server

whoami, pwd
ls
  -F classifFy
  -a all, including hidden and ., ..
  -s sort by size
  -h with -l print sizes in human readable format
  -l long -- include all information
  -R recursively
  -t sort by time of last change
rm, mv, cp, mkdir, rmdir
> redirect
>> append
wc -l -w -c (lines, words, character)
sort -n (numeric sort) -r (reverse results)
cat (concatenate)
head -1   tail -2

*[ab] selects *a and *b files

cat -d , (choose , as delimiter), -f 2 (select second field)
uniq removes *adjacent* duplicates (combine with sort to remove all duplicates)

*principle: pipes and filters*
filter: takes input, does something to it, produces output

for filename in *.txt; do echo $filename; done
history
expr - simple arithmetic using command-line parameters

bash myscript.sh - arguments can be used with $1, $2, $@ (be safe and use "$1")

_finding things_
grep
e.g. grep -n string /path (e.g. *.r)
 -w limit matches to word boundaries
 -n line numbers in results
 -i ignore case
 -e PATTERN (to protext a pattern beginning with a hyphen)
 -v inverts pattern matching
 -r (or --recursive) option is used to traverse also all sub-directories of /path
 -l, --files-with-matches
    Suppress normal output; instead print the name of each input file
from which output would normally have been printed. The scanning will
stop on the first match.
 -H, --with-filename
      Print the filename for each match.

grep -e "^.o" haiku.txt  -- find lines with o at second position in line
grep ^.o haiku.txt -- same result
grep .h haiku.txt -- find lines containing words with h at second position

find -- find files
 type f/d files or directories
 -mindepth -maxdepth to limit recursive search
examples:
find . -maxdepth 1 -type f  -- only files in current directly
find . -name '*.txt'  (avoids that shell expands *.txt first)

wc -l $(find . -mindepth 2 -type f)
-> first executes whats in $() and replaces this by result
-> like wildcards but let's us use our own commands as "wildcards"

very common to use grep and find together
grep "yields" $(find . -name "*.r")
-> finds "yields" in all R files recursively

** our Linux Cluster nodes
 cn-test: no ssh/interactive login
 cn5: not available anymore
 cn6, cn7, cn8, cn9, cn11 available
 c16a: available, Thomas
 c40: asking for pwd, dedicated for batch processing
 math2: Mathematica (Thomas)

 Slurm: cn6, cn7, cn8, c40, cn-test (last two ONLY slurm)
** keep processes running after ending ssh session
http://askubuntu.com/questions/8653/how-to-keep-processes-running-after-ending-ssh-session
- nohup
- screen
- tmux
- byobu
** Amazon EC2
- run command
  http://docs.aws.amazon.com/systems-manager/latest/userguide/execute-remote-commands.html
** Amazon AWS
*** storage solutions
http://stackoverflow.com/questions/29575877/aws-efs-vs-ebs-vs-s3-differences-when-to-use
see also FAQ https://aws.amazon.com/efs/faq/
*** access key for IAM user
Access key ID
AKIAIPK6SK2UTHL7Z6WQ
Secret access key
T2BGzRCLg37yi6fXe8pfxmA22pXUN+AZ+bIFgtBv
* Outlook
Ctrl-N to create new item (e.g., message when in Mail view)
Ctrl-Enter to send message
Ctrl + Shift + V move mails to folder
Ctrl-Q to unmark message
Ctrl-K complete sender
Ctrl + R: Reply
Ctrl + Shift + R: Reply to All
Ctrl + F: Forward an Email
* Git
** configuration
git config --global user.name Michael Bauer
git config --global user.email michael.d.bauer@gmail.com
git config --global core.editor emacsclientw

** make git repository on server from existing directory
first create repository on server
then follow these steps:
http://stackoverflow.com/questions/3311774/how-to-convert-existing-non-empty-directory-into-a-git-working-directory-and-pus

cd <localdir>
git init
git add .
git commit -m 'message'
git remote add origin <url>
git push -u origin master

** internal Gitlab server
*** add SSH key
https://about.gitlab.com/2014/03/04/add-ssh-key-screencast/
*** add remote repository
git remote set-url origin *or* git remote add origin
ssh://git@l1uerp20.sf.frb.org:8090/l1myb01/rrp.git
*** how to make it work with SmartGit
- use puttygen to generate private openSSH key (Conversions | export
  OpenSSH key)
*** how to make it work with TurtoiseGit
1. generate SSH keys using puttygen
   - save private key somewhere
2. add putty private key to TurtoiseGen configuration
   Git | Remote | Putty Key
3. add public key from clipboard to GitLab server

http://blog.assembla.com/AssemblaBlog/tabid/12618/bid/77264/Setting-Up-Git-on-Windows-in-Four-Easy-Steps.aspx

*** instructions

1. Login to the gitlab server and make sure you see the project.
https://l1uerp20.sf.frb.org:8089/

2. Generate SSH keys using ssh-keygen and add public key to gitlab as shown here:
https://about.gitlab.com/2014/03/04/add-ssh-key-screencast/

3. Now pull the repository. Two ways to do this

a)
- create an empty folder
- git init
- git remote add original
  ssh://git@l1uerp20.sf.frb.org:8090/l1myb01/trends.git
 [don't use own username, this is the directory!]
- git pull origin

b) git clone ssh://git@l1uerp20.sf.frb.org:8090/l1myb01/trends.git


To use TortoiseGit, need to convert the private SSH key to the putty format:
- Start puttygen
- Use Conversion and load the private key (id_rsa is the filename by default)
- Click on "Save private key"
- In TortoiseGit, add this private key, a ppk file, to your configuration for the repository:  Git | Remote | Putty Key

** external Gitlab server (Linode)
Login to https://www.employmentinterestandmoney.com:8089/
Go to project and obtain (copy-paste) HTTPS url
Adding the username in front of the URL
e.g.,
https://mbauer@www.employmentinterestandmoney.com:8089/mbauer/cyclical-EH.git
avoids having to re-enter it when pushing/pulling.
*** make server accept self-signed SSL certificate
http://stackoverflow.com/questions/11621768/how-can-i-make-git-accept-a-self-signed-certificate
git config --global http.sslverify "false"

*** proxy settings for FRBSF users
git config http.proxy "http://l1web1.frb.org:8080"
git config http.useragent "curl(git 2.6.4)"

of, for all repositories (and to work for cloning remote repositories)
git config --global http.useragent "curl(git 2.6.4)"
git config --global http.proxy "http://l1web1.frb.org:8080"

*** To connect and integrate repository on Gitlab with local repository
first navigate to local working directory and initialize repository:
git init

Add new remote to the local repository:
git remote add origin <url>
e.g. git remote add origin
https://www.employmentinterestandmoney.com:8089/mbauer/cyclical-EH.git

Integrate remote changes into local repository:
git pull origin master
Not the local repository contains everything that is in the remote.

Push local changes to remote for the first time:
git push -u origin master

*** workflow after making local changes
- commit changes to local repository
- push changes to remote

*** email to Aeimit
If you still have a local repository that is connected to the remote repository on the server, you can simply pull the changes. Otherwise, to start from scratch, to get the remote repository from the server, you would use:
"git clone <URL>"
This adds the remote repository at URL, under the name "origin", and pulls the content into a local repository.
Then you can add and commit files to your local repository, and push changes using
"git push -u origin master"
For more info on how to work with remote repositories see https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes

You can work with git using either the command line (e.g., the git bash) or TortoiseGit, which is a free, very nice GUI for git.

** commands
git log - shows commits
git status - shows staging area etc
git diff
git remote -v  - shows remotes with URLs
git remote show origin   - show more information about remote

standard workflow:
git pull
..edit files..
git add new-file
git commit -a -m "message"
git push

git gc - compress objects (avoids loose objects message
http://stackoverflow.com/questions/5709687/what-are-the-loose-objects-that-the-git-gui-refers-to)

** links with resources
http://plain-text.co/record.html#2_use_version_control
http://nyuccl.org/pages/gittutorial/

https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes

** emacs and git
https://www.emacswiki.org/emacs/Git
http://stackoverflow.com/questions/5925372/how-to-use-git-from-emacs

http://alexott.net/en/writings/emacs-vcs/EmacsGit.html
* Condor
** Resources
http://research.cs.wisc.edu/htcondor/quick-start.html
http://research.cs.wisc.edu/htcondor/manual/quickstart.html
http://research.cs.wisc.edu/htcondor/tutorials/fermi-2005/submit_first.html

http://research.cs.wisc.edu/htcondor/manual/
http://research.cs.wisc.edu/htcondor/manual/v8.2/index.html

http://www.iac.es/sieinvens/siepedia/pmwiki.php?n=HOWTOs.CondorSubmitFile

FAQs
http://vivaldi.ll.iac.es/sieinvens/siepedia/pmwiki.php?n=HOWTOs.CondorFAQs
http://research.cs.wisc.edu/htcondor/HTCondorWeek2015/presentations.html

introduction to condor
http://research.cs.wisc.edu/htcondor/HTCondorWeek2015/presentations/MillerK_introtutorial2015.pdf

** Commands
http://www.iac.es/sieinvens/siepedia/pmwiki.php?n=HOWTOs.CondorUsefulCommands

condor_submit
http://research.cs.wisc.edu/htcondor/manual/current/condor_submit.html

job not running
"Failed to get address of starter for this job"
if I use condor_tail
http://comments.gmane.org/gmane.comp.distributed.condor.user/30866

condor_q <userid> - check progress of jobs
http://research.cs.wisc.edu/htcondor/manual/current/condor_q.html
condor_q -analyze <job_id>

re_condor_q sorts and filters

condor_rm <jobid> - cancel job/remove from queue

condor_history -- check on past jobs and job completion

condor_status - Display status of the HTCondor pool
condor_prio

condor_hold, condor_release

** Open questions
- Which version of Condor do we have installed?
  - How can I check that?

- Currently, I can only submit jobs on c16a, and the jobs are run on
  c16a.
  - What will be the node to submit jobs?
  - Where will the jobs be run? Ideally as many nodes as possible
    (including older ones like cn5-cn7)
  - How do we prevent people from running interactive jobs on the
    compute nodes used by Condor?
** Who else is using Condor?
http://projects.iq.harvard.edu/rce/book/batch-processing-basics
** interactive vs batch processing
http://www.r-bloggers.com/batch-processing-vs-interactive-sessions/
** Condor vs Slurm
https://fortylines.com/blog/startingWithSLURM.blog.html
http://serverfault.com/questions/79350/software-for-batch-process-management-in-unix
 "SLURM and Condor are probably the easiest to get up and running, and
if your requirements are relatively modest, they may be the best
fit. "

https://rcc.fsu.edu/news/consolidating-condor-slurm
https://rcc.fsu.edu/docs/how-submit-hpc-jobs

*** SLURM
https://en.wikipedia.org/wiki/Slurm_Workload_Manager
http://slurm.schedmd.com/
https://rc.fas.harvard.edu/resources/running-jobs/

http://www.brightcomputing.com/blog/bid/174099/slurm-101-basic-slurm-usage-for-linux-clusters

* Slurm
** slurm scripts
- email:
#SBATCH --mail-type=ALL
#SBATCH --mail-user=darrin.chambers@sf.frb.org

- specify which nodes you want considered for your job, example:
#SBATCH --nodelist=cn[6-7]

** Resources
https://rc.fas.harvard.edu/resources/running-jobs/
https://rc.fas.harvard.edu/resources/documentation/convenient-slurm-commands/

Quick Start Tutorial and short list of FAQs from CECI (Belgium)
http://www.ceci-hpc.be/slurm_tutorial.html
http://www.ceci-hpc.be/slurm_faq.html
helpful sample script:
http://www.ceci-hpc.be/assets/doc/submission.sh

from official website:
http://slurm.schedmd.com/tutorials.html (videos)
http://slurm.schedmd.com/quickstart.html (very useful)

nice!
http://sherlock.stanford.edu/mediawiki/index.php/SLURMSubmit

** Commands
sinfo - overview of resources, shows partitions and nodes
 -N - show output in node-oriented fashion
 -l - more information about nodes
e.g. sinfo -N -l

squeue - list of jobs that are using resources

sbatch - submit jobs

sstat JOBID - information on running job

scontrol show job -dd 77

sview - GUI

** open questions/what I need to figure out
- when/why do I use "srun" in the submit script instead of simply
  calling a command? what is the difference?
  - doesn't make a difference for "hostname" or "echo ..."
  - but it does when ntasks>1
  => doesn't matter for simple sequential job, but needed for parallel
  job (without communication)

*** to kickstart the slurm testing
- how to run a simple job
  - batch file
  - R script
*** when testing in more detail
- if I submit 8 or 9 jobs, how are they allocated? 8+0/8+1 or 4+4/4+5?
  - first fills up cn6, then others go to cn7

** for Darrin
not urgent:
- can get rid of Rscript dummy (when Rscript is started on l1uerp21 it
  says "this is Rscript dummy")
- do we need additional partitions?
- when/how do we add further nodes?

** MATLAB
https://www.mathworks.com/matlabcentral/fileexchange/52807-parallel-computing-toolbox-integration-for-matlab-distributed-computing-server-with-slurm
https://www.mathworks.com/products/distriben/supported.html

https://www.mathworks.com/examples/parallel-computing

https://www.mathworks.com/help/distcomp/how-parallel-computing-products-run-a-job.html

* markdown/pandoc
http://daringfireball.net/projects/markdown/
cheatsheet:
https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet

http://kbroman.org/knitr_knutshell/pages/markdown.html

** Pandoc
http://pandoc.org/index.html

** pandoc minor mode
https://github.com/joostkremers/pandoc-mode
C-c /  to call main menu
** markdown major mode
http://jblevins.org/projects/markdown-mode/
- could be used: C-c C-c m etc to process markdown files
** polymode to get Rmarkdown to work with ESS
- to get ESS work with Rmarkdown files, get polymode:
http://johnstantongeddes.org/open%20science/2014/03/26/Rmd-polymode.html
https://stat.ethz.ch/pipermail/ess-help/2014-November/010289.html
http://simon.bonners.ca/bonner-lab/wpblog/?p=142
* knitR
http://yihui.name/knitr/

http://kbroman.org/knitr_knutshell/
 -> http://kbroman.org/knitr_knutshell/pages/Rmarkdown.html

knitr in a knutshell: chunks of R code inserted within a text
document. When processed by knitr, the R code chunks are executed and
results and/or figures inserted.
  - can be used to evaluate code chunks with R in
    - R markdown
    - AsciiDoc
    - LaTeX (!)

figures and tables: http://kbroman.org/knitr_knutshell/pages/figs_tables.html

* Calendars
** Sunbird into outlook/google
- Sunbird Calendar is seminars.ics at S:\WEB\calendars
- Import Sunbird seminar calendar into Google Calendar:
  https://support.google.com/calendar/answer/37118?hl=en
- Import/Open in Outlook
  - File | Open&Import | Open Calendar
  - then click on left arrow on calendar tab so that they overlay
** outlook into google
http://www.pcadvisor.co.uk/how-to/software/how-sync-google-outlook-calendars-3500196/
To export your Outlook calendar, go to File, Open and export, Import
and export. Select Export to a file and save it to a .csv file. To
import it into Google Calendar, click the down arrow next to Other
calendars and select Import calendar.
* Python
- install Anaconda -- full science stack
- set up Emacs with Python/Elpy:
  https://realpython.com/blog/python/emacs-the-best-python-editor/
- see also: https://emacswiki.org/emacs/PythonProgrammingInEmacs

* Floating point arithmetic
often causes problems!
[[file:~/Papers/G/Goldberg%20(1991)%20What%20Every%20Computer%20Scientist%20Should%20Know%20About%20Floating%20Point%20Arithmetic.pdf][Goldberg's classical paper]]

* Website
- jekyll and github-pages http://jmcglone.com/guides/github-pages/
- markdown https://blog.ghost.org/markdown/
- overview of static site generators
  http://mashable.com/2014/08/28/static-website-generators/
- Hugo seems pretty good
  https://github.com/kjhealy/kieranhealy.hugo/
- org-mode
  - blog  http://orgmode.org/worg/org-blog-wiki.html
  - https://trashbird1240.wordpress.com/2012/01/17/set-up-a-website-using-emacs-org-mode/
  - see also [[*cool%20new%20tricks%20from%20Harry%20Schwartz%20video][here]]
  - webpages made with org-mode: http://orgmode.org/worg/org-web.html
  - http://cinsk.github.io/articles/jekyll-org.html
  - http://brittanderson.github.io/blog/orgpage-orgpublish.html
- how Hadley did the website for Advanced R: see section "Colophon" at http://adv-r.had.co.nz/Introduction.html
- for hosting on AWS: https://aws.amazon.com/getting-started/projects/host-static-website/

* workflow/reproducible research/scientific computing
[[http://kieranhealy.org/files/papers/plain-person-text.pdf][The Plain Person's Guide to Plain Text Social Science]]
[[http://kbroman.org/steps2rr/][Broman - initial steps toward reproducible research]]
[[http://journals.plos.org/ploscompbiol/article?id%3D10.1371/journal.pcbi.1000424][A Quick Guide to Organizing Computational Biology Projects]]

[[file:~/Papers/W/Wilson%20-%20Best%20Practices%20for%20Scientific%20Computing.PDF][Best Practices for Scientific Computing]]

* Backup
- 3-2-1 rule for backup: http://lifehacker.com/5961216/why-you-should-have-more-than-one-backup
- best online backup software:
  - http://www.pcmag.com/article2/0,2817,2288745,00.asp
  - wirecutter: CrashPlan (or BackBlaze): http://thewirecutter.com/reviews/best-online-backup-service/
  - lifehacker: CrashPlan most votes: http://lifehacker.com/five-best-online-backup-services-1006345049
- using Amazon S3 and Arq
  - How To: https://computers.tutsplus.com/tutorials/how-to-backup-all-your-files-to-amazon-s3--cms-21386
  - this is also Hadley Wickham's backup solution https://usesthis.com/interviews/hadley.wickham/
  - whitepaper on using AWS for backup: https://d0.awsstatic.com/whitepapers/Backup_and_Recovery_Approaches_Using_AWS.pdf
- CloudBerry to Amazon S3 and Glacier: https://www.cloudberrylab.com/backup/windows/amazon-s3.aspx
  - is this a recommended solution?
- Amazon Glacier makes sense: long-term storage
  - How to: http://lifehacker.com/how-to-use-amazon-glacier-as-a-dirt-cheap-backup-solut-1460814873
  "However, if you're already backing up your data locally to a NAS or
  external drive, and perhaps also using cloud storage and syncing
  like Dropbox or Google Drive, Amazon Glacier can be your dirt cheap
  offsite backup. (Remember the 3-2-1 backup rule?) That way, you have
  your local backup for retrieving deleted files, restoring your
  system after a crash, or whatever else. Your Amazon Glacier backup
  is there just in case your computer and backup drive both get
  ruined, like in a fire or an earthquake."
  - How to: http://www.technologyguide.com/howto/how-to-back-up-your-data-with-amazon-glacier/
  - tools: https://www.cloudwards.net/best-backup-tools-amazon-glacier/

** what to get rid of and not include in backup
- Z:\Documents\Stata10

* AWS
** putty
 http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/putty.html
 - transfer files:
 pscp -i C:\Users\Michael\Documents\aws\my_putty_private_key.ppk C:\Users\Michael\Documents\trends\data\yields_le_monthly.csv
 ec2-user@ec2-35-163-240-123.us-west-2.compute.amazonaws.com:yields_le_monthly.csv
 - probably want ot create a saved session with key file and user name
   - see 5.2.4 https://the.earth.li/~sgtatham/putty/0.68/htmldoc/Chapter5.html#pscp-usage

** Rstudio server
 - verify installation
   sudo rstudio-server verify-installation
 - make sure it's listening on port
   wget localhost:8787
 - upload/download files:
   https://support.rstudio.com/hc/en-us/articles/200713893-Uploading-and-Downloading-Files
 - isntall packages
 https://slices.svbtle.com/installing-packages-on-to-an-ec2-rstudio-instance

** AWS Unix tricks
 - change to root user
   sudo su

** things to try/open issues
*** TODO use tramp to connect to ec2 instance
 https://groups.google.com/forum/#!topic/gnu.emacs.help/YW8j_y81LuU
 http://stackoverflow.com/questions/9901030/tramp-mode-in-emacs-using-ssh-config

*** file transfer to Rstudio using SCP
 - in Rstudio I'm in a different folder (mdbauer) than the one I can upload to using pscp (ec2-user)
 - can't access ec2-user from Rstudio, can't upload to mdbauer using PSCP
 - solution for now: putty connect to EC2 instance, change to root, move file
* my configuration
documentation so I can replicate it on new/personal machines
** Software
- MS Office
- Browsers: Chrome, Mozilla Firefox, IE or Edge
- Emacs: https://vigou3.github.io/emacs-modified-windows/
- NoMachine
- PuTTY: http://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html
- WinSCP: https://winscp.net/eng/download.php
- MATLAB
- Git: https://git-scm.com/downloads
- SmartGit: http://www.syntevo.com/smartgit/download
  - commercial-use license
- MiKTeX: https://miktex.org/download
  - if not included in MiKTeX, GPL Ghostscript and GSView
- R: https://www.r-project.org/
- Rstudio
- Stata
- SumatraPDF
- WinZip
- Pandoc: http://pandoc.org/installing.html
- SyncToy
- Perl - http://strawberryperl.com/
** System setup
- set HOME to C:\Users\myusername
- theme Sunny Shores
- add to PATH
  - C:\Rtools\bin
  - C:\Program Files\R\R-3.3.2\bin
  - C:\GNU Emacs 25.1\bin
  - C:\Program Files\Git\usr\bin (for perl)
- Adobe Acrobat scroll bar
  Go to edit, preferences, general. In the touch mode drop-down box,
  select never. The scroll bar is back!

** folder backup
- install synctoy
- use task scheduler to run daily sync:
  https://www.groovypost.com/howto/task-scheduler-windows-7-sync-toy/

** Linux Cluster: Putty and NoMachine
l1uerp21.sf.frb.org
SSH, Port 22
** Miktex
- create local texmf tree in ~\texmf
- put econ.bst (or others) into ~\texmf\bibtex\bst\
- add tree under miktex options (mo.exe), refresh

** Emacs
- add runemacs to startup
- add emacs bin folder to path
*** installation
download from [[http://mirrors.syringanetworks.net/gnu/emacs/windows/][FTP repository]]
1. get windows 64-bit binaries and extract in, for example, c:/emacs/emacs-25.1/...
2. get dependencies and extract in same folder
- or, better, all-in-one Emacs by Vincent Goulet
https://vigou3.github.io/emacs-modified-windows/

*** shortcuts/file associations:
 - shortcut: C:\emacs\emacs-25.1-modified\bin\emacsclientw.exe -c
   - or runemacs.exe, works just fine as well
 - file associations: emacsclientw.exe
 - set environment variable ALTERNATE_EDITOR to runemacs.exe
   - https://www.gnu.org/software/emacs/manual/html_node/efaq-w32/Associate-files-with-Emacs.html

*** make Caps Lock key Ctrl
 put the following in file with extension .reg, and execute

 REGEDIT4

 [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]
 "Scancode Map"=hex:00,00,00,00,00,00,00,00,02,00,00,00,1d,00,3a,00,00,00,00,00

*** ESS
 - installed with Vincent Goulet's emacs
 - only need to make sure the Windows PATH points to Rterm.exe of the
   latest R installation
** R
- set default CRAN mirror
  - either in .Rprofile or Rprofile.site
  - see [[http://stackoverflow.com/questions/8475102/set-default-cran-mirror-permanent-in-r][here]]
- Rtools

** pandoc
* Backup
- 3-2-1 rule for backup: http://lifehacker.com/5961216/why-you-should-have-more-than-one-backup
- best online backup software:
  - http://www.pcmag.com/article2/0,2817,2288745,00.asp
  - wirecutter: CrashPlan (or BackBlaze): http://thewirecutter.com/reviews/best-online-backup-service/
  - lifehacker: CrashPlan most votes: http://lifehacker.com/five-best-online-backup-services-1006345049
- using Amazon S3 and Arq
  - How To: https://computers.tutsplus.com/tutorials/how-to-backup-all-your-files-to-amazon-s3--cms-21386
  - this is also Hadley Wickham's backup solution https://usesthis.com/interviews/hadley.wickham/
  - whitepaper on using AWS for backup: https://d0.awsstatic.com/whitepapers/Backup_and_Recovery_Approaches_Using_AWS.pdf
- CloudBerry to Amazon S3 and Glacier: https://www.cloudberrylab.com/backup/windows/amazon-s3.aspx
  - is this a recommended solution?
- Amazon Glacier makes sense: long-term storage
  - How to: http://lifehacker.com/how-to-use-amazon-glacier-as-a-dirt-cheap-backup-solut-1460814873
  "However, if you're already backing up your data locally to a NAS or
  external drive, and perhaps also using cloud storage and syncing
  like Dropbox or Google Drive, Amazon Glacier can be your dirt cheap
  offsite backup. (Remember the 3-2-1 backup rule?) That way, you have
  your local backup for retrieving deleted files, restoring your
  system after a crash, or whatever else. Your Amazon Glacier backup
  is there just in case your computer and backup drive both get
  ruined, like in a fire or an earthquake."
  - How to: http://www.technologyguide.com/howto/how-to-back-up-your-data-with-amazon-glacier/
  - tools: https://www.cloudwards.net/best-backup-tools-amazon-glacier/

** what to get rid of and not include in backup
- Z:\Documents\Stata10


