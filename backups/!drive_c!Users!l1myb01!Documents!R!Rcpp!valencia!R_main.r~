# -------------------------------#
# Author: David Zarruk Valencia  #
# Date:   June, 2017             #
# -------------------------------#

#--------------------------------#
#           Parameters           #
#--------------------------------#

# Grid for x
nx            = 300;
xmin          = 0.1;
xmax          = 4.0;

# Grid for e: parameters for Tauchen
ne            = 15;
ssigma_eps    = 0.02058;
llambda_eps   = 0.99;
m             = 1.5;

# Utility function
ssigma        = 2;
eeta          = 0.36;
ppsi          = 0.89;
rrho          = 0.5;
llambda       = 1;
bbeta         = 0.97;
T             = 10;

# Prices
r             = 0.07;
w             = 5;

print("Life cycle computation: ")
start = proc.time()[3];

# Initialize grids
xgrid = matrix(0, 1, nx)
egrid = matrix(0, 1, ne)
P     = matrix(0, ne, ne)
V     = array(0, dim=c(T, nx, ne))


#--------------------------------#
#         Grid creation          #
#--------------------------------#

# Grid for x
size = nx;
xstep = (xmax - xmin) /(size - 1);
it = 0;
for(i in 1:nx){
  xgrid[i] = xmin + it*xstep;
  it = it+1;
}

# Grid for e with Tauchen (1986)
size = ne;
ssigma_y = sqrt((ssigma_eps^2) / (1 - (llambda_eps^2)));
estep = 2*ssigma_y*m / (size-1);
it = 0;
for(i in 1:ne){
  egrid[i] = (-m*sqrt((ssigma_eps^2) / (1 - (llambda_eps^2))) + it*estep);
  it = it+1;
}

# Transition probability matrix Tauchen (1986)
mm = egrid[2] - egrid[1];
for(j in 1:ne){
  for(k in 1:ne){
    if(k == 1){
      P[j, k] = pnorm((egrid[k] - llambda_eps*egrid[j] + (mm/2))/ssigma_eps);
    } else if(k == ne){
      P[j, k] = 1 - pnorm((egrid[k] - llambda_eps*egrid[j] - (mm/2))/ssigma_eps);
    } else{
      P[j, k] = pnorm((egrid[k] - llambda_eps*egrid[j] + (mm/2))/ssigma_eps) - pnorm((egrid[k] - llambda_eps*egrid[j] - (mm/2))/ssigma_eps);
    }
  }
}

# Exponential of the grid e
egrid = exp(egrid)

print("Starting value function iteration: ")

for(age in T:1){
    for(ix in 1:nx){
        for(ie in 1:ne){
            VV <- -10^3
            for(ixp in 1:nx) {
                ## consumption
                cons <- (1 + r)*xgrid[ix] + egrid[ie]*w - xgrid[ixp]
                ## utility
                if (cons <= 0) {
                    utility <- -10^5
                } else {
                    ## if not last period, include expected continuation value
                    if (age < T) {
                        utility <- (cons^(1-ssigma))/(1-ssigma) + bbeta*sum(P[ie, ]*V[age+1, ixp, ])
                    } else {
                        utility <- (cons^(1-ssigma))/(1-ssigma)
                    }
                }
                VV <- max(utility, VV)
            }
            V[age, ix, ie] <- VV
        }
    }
    finish = proc.time()[3] - start;
    print(paste0("Age: ", age, ". Time: ", round(finish, 3), " seconds."))
}

finish = proc.time()[3] - start;
print(paste("TOTAL ELAPSED TIME: ", finish, " seconds. "))

print("Check: the first three entries of the value function: ")
print(Value[1, 1, 1:3])
