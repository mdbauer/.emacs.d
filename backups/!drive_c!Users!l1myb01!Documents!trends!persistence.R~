## persistence of interest rates vs. detrended interest rates

rm(list=ls())
require(sandwich) # NeweyWest()
require(xtable) # xtable()
require(urca) # ur.df()
source("R/trends_fns.R")
source("R/ur_tests.R")
df <- loadData()

## Table 1: regressions of y10 on pi* and r*
varnames <- c("pistar.ptr", "rstar.mean")
specs <- rbind(c(1,0),
               c(1,1))
yieldvars <- c("y5", "y10", "f510")
texyieldvars <- c("y^{(5y)}_t", "y^{(10y)}_t", "f^{(5y, 10y)}_t")
mods <- list(length(yieldvars))
tbl <- data.frame(matrix(NA, 3+ncol(specs)*2, 1+2*length(yieldvars)))
rownames(tbl) <- c("const", "const SE",
                   "pi-star", "pi-star SE",
                   "r-star", "r-star SE",
                   "R^2")
tbl[,1] <- sprintf("%-15s", c("constant", "",
                              "$\\pi_t^\\ast$", "",
                              "$r_t^\\ast$", "",
                              "$R^2$"))
col <- 2
nwlags <- 6 # bwNeweyWest(mod)  ## mostly around 5-7
for (i in seq_along(yieldvars)) {
    depvar <- yieldvars[i]
    mods[[i]] <- list(nrow(specs))
    for (j in 1:2) {
        regnames <- varnames[specs[j,]==1]
        fmla <- formula(paste("get(depvar) ~", paste(regnames, collapse="+")))
        mod <- lm(fmla, df)
        mods[[i]][[j]] <- mod
        regrows <- c(1, seq(3, by=2, len=ncol(specs))[specs[j,]==1])
        tbl[regrows, col] <- mod$coef
        V <- NeweyWest(mod, lag=nwlags, prewhite=FALSE)
        tbl[regrows+1, col] <- sqrt(diag(V))
        tbl[nrow(tbl), col] <- summary(mod)$r.squared
        col <- col+1
    }
}
tbl[, -1] <- formatTbl(tbl[, -1], se.rows=c(2,4,6))
print(tbl)

sink("tables/reg.tex")
print(xtable(tbl, digits=2),
      include.rownames=FALSE, include.colnames=FALSE, only.contents=TRUE,
      sanitize.text.function=function(x){x}, hline.after=nrow(tbl)-1)
sink()

cvsMacKinnon <- function(T, nvar) {
    ## MacKinnon critical values
    ## nvar=1 means no cointegrating regression, only one variable
    ## nvar=2 means residual from regression on one variable
    if (nvar==1) {
        b0 <- c(-3.43035, -2.86154, -2.56677)
        b1 <- c(-6.5393, -2.8903, -1.5384)
        b2 <- c(-16.786, -4.234, -2.809)
        b3 <- c(-79.433, -40.040, 0)
    } else if (nvar==2) {
        b0 <- c(-3.89644, -3.33613, -3.04445)
        b1 <- c(-10.9519, -6.1101, -4.2412)
        b2 <- c(-22.527, -6.823, -2.720)
        b3 <- rep(0, 3)
    } else if (nvar==3) {
        b0 <- c(-4.29374, -3.74066, -3.45218)
        b1 <- c(-14.4354, -8.5631, -6.2143)
        b2 <- c(-33.195, -10.852, -3.718)
        b3 <- c(47.433, 27.982, 0)
    } else {
        stop("not implemented for more than 3 variables in cointegration regression")
    }
    cvs <- sapply(1:3, function(i) b0[i] + b1[i]/T + b2[i]/T^2 + b3[i]/T^3)
    return(cvs)
}

myADF <- function(z, nvar) {
    ## Augmented Dickey-Fuller
    ## - general to specific procedure
    ## - use correct critical values
    kmax <- 4
    k <- kmax + 1; pval <- Inf
    type <- ifelse(nvar==1, "drift", "none") # no constant if series is cointegration residual
    while (pval > 0.1 & k > 0) {
        k <- k-1
        rval <- ur.df(z, type, lags=k)
        pval <- tail(rval@testreg$coefficients[,4], 1)
    }
    result <- sprintf("%4.2f", rval@teststat[1])
    T <- length(rval@testreg$residuals)
    cvs <- cvsMacKinnon(T, nvar)
    sig <- (rval@teststat[1] < cvs)
    if (any(sig))
        result <- paste(c(result, rep("*", sum(sig))), collapse="")
    cat("ADF: lags = ", rval@lags, ", obs = ", T, ", N = ", nvar, "\n", sep="")
    ## print(rbind(cvs, rval@cval[1,]))
    return(result)
}

myPP <- function(z, nvar) {
    ## Phillips-Perron test
    if (nvar==1) {
        ## only one variable, no spurious regression
        rval <- my.ur.pp(z, type="Z-alpha", model="constant", lags="short")
        cvs <- c(-20.3, -14, -11.2) # Hamilton p. 762, T=250
    } else if (nvar>1) {
        rval <- my.ur.pp(z, type="Z-alpha", model="none", lags="short")
        if (nvar==2) {
            cvs <- c(-28.3, -20.5, -17) # Hamilton p. 765, T=500
        } else if (nvar==3) {
            cvs <- c(-34.2, -26.1, -22.2)
        }
    }
    result <- sprintf("%4.2f", rval)
    sig <- (rval < cvs)
    if (any(sig))
        result <- paste(c(result, rep("*", sum(sig))), collapse="")
    return(result)
}

myERS <- function(z, nvar) {
    ## Elliott-Rothenberg-Stock
    rval <- ur.ers(z, type="DF-GLS", model="constant", lag.max=1)
    result <- sprintf("%4.2f", rval@teststat)
    sig <- (rval@teststat < rval@cval)
    if (any(sig))
        result <- paste(c(result, rep("*", sum(sig))), collapse="")
    cat("ERS: lags = ", rval@lag, "\n")
    if (nvar>1) result <- NA
    return(result)
}

myKPSS <- function(z, nvar) {
    ## KPSS test for stationarity
    rval <- ur.kpss(z, type="mu")
    result <- sprintf("%4.2f", rval@teststat)
    sig <- (rval@teststat > rval@cval[-3])
    if (any(sig))
        result <- paste(c(result, rep("*", sum(sig))), collapse="")
    cat("KPPS: lags = ", rval@lag, "\n")
    return(result)
}

getStats <- function(z, nvar=1) {
    rho <- acf(z, lag.max=1, plot=FALSE)$acf[2]
    rval <- sprintf("%4.2f", c(sd(z), rho))
    rval <- c(rval, sprintf("%4.1f", log(0.5)/log(abs(rho))))
    rval <- c(rval, myADF(z, nvar), myPP(z, nvar)) #
    ## also available: myERS(z, nvar), myKPSS(z, nvar)
    return(rval)
}

## Table 2: properties of detrended yield series
texvarnames <- c("\\pi_t^\\ast", "r_t^\\ast")
tbl2 <- data.frame(matrix(NA, length(yieldvars)*5, 6))
names(tbl2) <- c("Series", "SD", "ACF(1)", "Half-life", "ADF", "PP") #, "KPPS")
X <- data.matrix(df[varnames])
row <- 1
for (i in seq_along(yieldvars)) {
    depvar <- yieldvars[i]
    ## yield
    z <- df[[depvar]]
    tbl2[row, 1] <- paste0("$", texyieldvars[i], "$")
    tbl2[row, -1] <- getStats(z)
    row <- row+1
    ## yield detrended, unit coefficients
    for (j in 1:2) {
        b <- specs[j,]
        ind <- b==1
        z <- df[[depvar]] - X %*% b
        tbl2[row, 1] <- paste0("$", texyieldvars[i], "-", paste(texvarnames[ind], collapse=" - "), "$")
        tbl2[row, -1] <- getStats(z)
        row <- row+1
    }
    ## yield residuals
    for (j in 1:2) {
        ind <- specs[j,]==1
        z <- mods[[i]][[j]]$resid
        b <- mods[[i]][[j]]$coef
        terms <- paste0(sprintf("%4.2f", b[-1]), texvarnames[ind])
        tbl2[row, 1] <- paste0("$", texyieldvars[i], "-", paste(terms, collapse=" - "), "$")
        tbl2[row, -1] <- getStats(z, nvar=1+sum(ind))
        row <- row+1
    }
}
## ## additional variables:
## tbl2[row, 1] <- "$\\pi^\\ast_t$"
## tbl2[row, -1] <- getStats(df$pistar.ptr)
## row <- row+1
## tbl2[row, 1] <- "$\\pi_t$"
## tbl2[row, -1] <- getStats(df$pi)
## row <- row+1
## tbl2[row, 1] <- "$\\pi_t - \\pi_t^\\ast$"
## tbl2[row, -1] <- getStats(df$pi - df$pistar.ptr)
## row <- row+1
## tbl2[row, 1] <- "$r^\\ast_t$"
## tbl2[row, -1] <- getStats(df$rstar.mean)
## row <- row+1
## tbl2[row, 1] <- "$r_t$"
## tbl2[row, -1] <- getStats(df$earr)
## row <- row+1
## tbl2[row, 1] <- "$r_t - r^\\ast_t$"
## tbl2[row, -1] <- getStats(df$earr - df$rstar.mean)
## row <- row+1

tbl2[,1] <- sprintf(paste0("%-", max(nchar(tbl2[,1])),"s"), tbl2[,1])
print(tbl2)

## print/export table 2
sink("tables/detrended.tex")
print(xtable(tbl2, digi=2),
      include.rownames=FALSE, include.colnames=FALSE, only.contents=TRUE,
      sanitize.text.function=function(x){x}, hline.after=c(5,10))
sink()

## print middle and bottom panels for presentation
## include highlighting
rows <- rep(c(1,2,3), each=3)
cols <- rep(c(3,4,5), 3)
tbl2[cbind(5+rows, cols)] <- paste("\\cellcolor{chlt}", tbl2[cbind(5+rows, cols)])

sink("tables/detrended_y10_pres.tex")
print(xtable(tbl2[6:10,], digi=2),
      include.rownames=FALSE, include.colnames=FALSE, only.contents=TRUE,
      sanitize.text.function=function(x){x}, hline.after=NULL)
sink()
sink("tables/detrended_f510_pres.tex")
print(xtable(tbl2[11:15,], digi=2),
      include.rownames=FALSE, include.colnames=FALSE, only.contents=TRUE,
      sanitize.text.function=function(x){x}, hline.after=NULL)
sink()

